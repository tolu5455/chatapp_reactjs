{"version":3,"sources":["component/Room.js","component/Login.js","config/base.js","reducer/reducer.js","store/store.js","App.js","serviceWorker.js","index.js"],"names":["firebase","require","Room","isLoaded","this","props","users","react_default","a","createElement","isEmpty","userList","estimatedServerTimeMs","amOnline","database","ref","userRef","uid","user","on","snapshot","val","snap","offset","Date","getTime","date","hours","getHours","minutes","getMinutes","seconds","getSeconds","formattedTime","substr","onDisconnect","set","push","className","key","displayName","src","avatarUrl","alt","style","width","connections","id","type","placeholder","color","name","rows","Component","compose","firebaseConnect","path","connect","state","auth","data","Login","_this","lib","onClick","login","provider","goOffline","logout","component_Room","_ref","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","rootReducer","combineReducers","firebaseReducer","initializeApp","enhancers","reactReduxFirebase","userProfile","enableLogging","composedEnhancers","apply","store","createStore","App","fontSize","es","component_Login","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5eff9a37.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../style/Room.css'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { compose } from 'redux'\nimport { firebaseConnect, isLoaded, isEmpty } from 'react-redux-firebase'\n\nconst firebase = require(\"firebase\")\nrequire(\"firebase/firestore\")\n\nclass Room extends Component {\n\n  render() {\n\n    if (!isLoaded(this.props.users)) {\n      return <div>Loadding...</div>\n    }\n    if (isEmpty(this.props.users)) {\n      return <div>No user</div>\n    }\n    let userList = []\n    var estimatedServerTimeMs = 0;\n    var amOnline = firebase.database().ref('.info/connected');\n    var userRef = firebase.database().ref('users/' + this.props.uid.uid + '/connections');\n    amOnline.on('value', function (snapshot) {\n      if (snapshot.val()) {\n        var offsetRef = firebase.database().ref(\".info/serverTimeOffset\");\n        offsetRef.on(\"value\", function (snap) {\n          var offset = snap.val();\n          estimatedServerTimeMs = new Date().getTime() + offset;\n        });\n        var date = new Date(estimatedServerTimeMs);\n        var hours = date.getHours();\n        var minutes = \"0\" + date.getMinutes();\n        var seconds = \"0\" + date.getSeconds();\n\n        var formattedTime = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\n        userRef.onDisconnect().set(\"last online \" + formattedTime);\n        userRef.set(\"online\")\n      }\n    });\n    for (var user in this.props.users) {\n      userList.push(\n        <li className=\"clearfix\" key={this.props.users[user].displayName}>\n          <img src={this.props.users[user].avatarUrl} alt=\"avatar\" style={{ width: \"40px\" }} />\n          <div className=\"about\">\n            <div className=\"name\">{this.props.users[user].displayName}</div>\n            <div className=\"status\">\n              <i>{this.props.users[user].connections}</i>\n            </div>\n          </div>\n        </li>)\n    }\n    return (\n      <div>\n        <div className=\"container clearfix\">\n          <div className=\"people-list\" id=\"people-list\">\n            <div className=\"search\">\n              <input type=\"text\" placeholder=\"search\" />\n              <i className=\"fa fa-search\"></i>\n            </div>\n            <ul className=\"list\">\n              {userList}\n            </ul>\n          </div>\n          <div className=\"chat\">\n            <div className=\"chat-header clearfix\">\n              <img src=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/195612/chat_avatar_01_green.jpg\" alt=\"avatar\" />\n\n              <div className=\"chat-about\">\n                <div className=\"chat-with\">Chat with Vincent Porter</div>\n                <div className=\"chat-num-messages\">already 1 902 messages</div>\n              </div>\n              <i className=\"fa fa-star\"></i>\n            </div>\n\n            <div className=\"chat-history\">\n              <ul>\n                <li className=\"clearfix\">\n                  <div className=\"message-data align-right\">\n                    <span className=\"message-data-time\" >10:10 AM, Today</span> &nbsp; &nbsp;\n                      <span className=\"message-data-name\" >Olia</span> <i className=\"fa fa-circle me\"></i>\n\n                  </div>\n                  <div className=\"message other-message float-right\">\n                    Hi Vincent, how are you? How is the project coming along?\n                    </div>\n                </li>\n\n                <li>\n                  <div className=\"message-data\">\n                    <span className=\"message-data-name\"><i className=\"fa fa-circle online\"></i> Vincent</span>\n                    <span className=\"message-data-time\">10:12 AM, Today</span>\n                  </div>\n                  <div className=\"message my-message\">\n                    Are we meeting today? Project has been already finished and I have results to show you.\n                    </div>\n                </li>\n\n                <li className=\"clearfix\">\n                  <div className=\"message-data align-right\">\n                    <span className=\"message-data-time\" >10:14 AM, Today</span> &nbsp; &nbsp;\n                      <span className=\"message-data-name\" >Olia</span> <i className=\"fa fa-circle me\"></i>\n\n                  </div>\n                  <div className=\"message other-message float-right\">\n                    Well I am not sure. The rest of the team is not here yet. Maybe in an hour or so? Have you faced any problems at the last phase of the project?\n                    </div>\n                </li>\n\n                <li>\n                  <div className=\"message-data\">\n                    <span className=\"message-data-name\"><i className=\"fa fa-circle online\"></i> Vincent</span>\n                    <span className=\"message-data-time\">10:20 AM, Today</span>\n                  </div>\n                  <div className=\"message my-message\">\n                    Actually everything was fine. I'm very excited to show this to our team.\n                    </div>\n                </li>\n\n                <li>\n                  <div className=\"message-data\">\n                    <span className=\"message-data-name\"><i className=\"fa fa-circle online\"></i> Vincent</span>\n                    <span className=\"message-data-time\">10:31 AM, Today</span>\n                  </div>\n                  <i className=\"fa fa-circle online\"></i>\n                  <i className=\"fa fa-circle online\" style={{ color: \"#AED2A6\" }}></i>\n                  <i className=\"fa fa-circle online\" style={{ color: \"#DAE9DA\" }}></i>\n                </li>\n\n              </ul>\n\n            </div>\n\n            <div className=\"chat-message clearfix\">\n              <textarea name=\"message-to-send\" id=\"message-to-send\" placeholder=\"Type your message\" rows=\"3\"></textarea>\n\n              <i className=\"fa fa-file-o\"></i> &nbsp;&nbsp;&nbsp;\n                <i className=\"fa fa-file-image-o\"></i>\n\n              <button>Send</button>\n\n            </div>\n\n          </div>\n\n        </div>\n      </div>\n\n    )\n  }\n}\n\nexport default compose(\n  firebaseConnect((props) => [\n    { path: 'users' }\n  ]),\n  connect((state, props) => ({\n    uid: state.firebase.auth,\n    users: state.firebase.data.users\n  }))\n)(Room)","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { compose } from 'redux'\nimport { connect } from 'react-redux'\nimport { firebaseConnect, isLoaded, isEmpty } from 'react-redux-firebase'\nimport Room from './Room';\nimport { GoogleLoginButton } from 'react-social-login-buttons'\n\nconst firebase = require(\"firebase\")\n\nclass Login extends Component {\n    static propTypes = {\n        auth: PropTypes.object,\n        firebase: PropTypes.shape({\n            login: PropTypes.func.isRequired,\n            logout: PropTypes.func.isRequired\n        })\n    }\n\n    render() {\n        if (!isLoaded(this.props.auth)) {\n            return null\n        }\n        if (isEmpty(this.props.auth)) {\n            return (\n                <div>\n                    <GoogleLoginButton style={{ width: \"300px\" }}\n                        onClick={() => this.props.firebase.login({ provider: 'google', type: 'redirect' })}\n                    >Log in with Google</GoogleLoginButton>\n                </div>\n            )\n        }\n        return (\n            <div>\n                <button onClick={() => {\n                    firebase.database().goOffline();\n                    this.props.firebase.logout()\n                }\n                }> Logout</button >\n                <Room />\n            </div>\n\n        )\n    }\n}\n\nexport default compose(\n    firebaseConnect(),\n    connect(({ firebase: { auth } }) => ({ auth }))\n)(Login)"," \nvar firebaseConfig = {\n  apiKey: \"AIzaSyDnRdyqOyCN3g0H2Qkd4IyDXYlDRtZoURw\",\n  authDomain: \"newchat-react.firebaseapp.com\",\n  databaseURL: \"https://newchat-react.firebaseio.com\",\n  projectId: \"newchat-react\",\n  storageBucket: \"newchat-react.appspot.com\",\n  messagingSenderId: \"583540147958\"\n  };\n\n  export default firebaseConfig","import {combineReducers} from 'redux'\nimport {firebaseReducer} from 'react-redux-firebase'\nimport {firestoreReducer} from 'redux-firestore'\n\nexport const initialState = {}\n\nexport const rootReducer = combineReducers({\n    firebase: firebaseReducer,\n})","import { createStore, compose, applyMiddleware } from 'redux'\nimport { reactReduxFirebase, getFirebase } from 'react-redux-firebase'\nimport { reduxFirestore } from 'redux-firestore'\nimport firebase from 'firebase/app'\nimport thunk from 'redux-thunk'\nimport 'firebase/auth'\nimport 'firebase/firestore'\nimport firebaseConfig from '../config/base'\nimport { initialState, rootReducer } from '../reducer/reducer'\n\nfirebase.initializeApp(firebaseConfig)\n\nconst enhancers = [\n    reactReduxFirebase(firebase, {\n        userProfile: 'users',\n        enableLogging: false,\n    })\n]\n\nconst composedEnhancers = compose(\n    ...enhancers\n)\n\nconst store = createStore(rootReducer, initialState, composedEnhancers)\n\nexport default store","import React, { Component } from 'react';\nimport {Provider} from 'react-redux'\nimport Login from './component/Login'\nimport store from './store/store'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h2 style={{color: \"black\", fontSize: \"40px\"}}>Chat App</h2>\n          <Provider store={store}>\n            <div>\n              <Login />\n            </div>            \n          </Provider>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}